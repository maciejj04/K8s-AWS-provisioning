- hosts: localhost
  gather_facts: no
  tasks:
    - include_vars:
        file: "{{ item }}"
      loop:
        - vars/commons.yaml
        - vars/worker.yaml
      tags:
        - test

    - name: MOCKING!
      include_vars:
        file: vars/mock.yaml
      tags:
        - mock
        - test

    - name: Create kubeconfig for each kubelet (node authorization)
      include: "{{ playbook_dir }}/k8s_components_kubeconfigs/prepare_kubelet_kubeconfig.yaml"
      with_items: "{{ groups['worker-nodes'] }}"
      loop_control:
        loop_var: ip
        index_var: host_idx

- hosts: worker-nodes
  name: Setup worker nodes
  user: ubuntu
#  gather_facts: no
  tasks:
    - include_vars:
        file: "{{ item }}"
      loop:
        - vars/commons.yaml
        - vars/worker.yaml
      tags:
        - always

    - name: Set host index
      set_fact:
        host_idx: "{{ play_hosts.index(inventory_hostname) }}"
      tags:
        - always

    - name: Check mandatory variables
      fail:
        msg: "{{ item }} was not defined!"
      when: vars[item] is undefined or vars[item] == None
      loop:
        - masters_frontend_lb
      tags:
        - always

    - name: Install system dependencies
      when: ansible_facts['distribution'] == "Ubuntu" # ansible_facts['distribution'] is defined (fail when undefined?)
      become: true
      # TODO: async
      block:
        - name: Update and upgrade apt packages
          apt:
            upgrade: yes
            update_cache: yes
        - name: Install os dependencies
          apt:
            name: "{{ packages }}"
          vars:
            packages:
            - socat
            - conntrack
            - ipset

    - name: Download and Install Worker Binaries
      async: "{{ default_async_timeout }}"
      poll: "{{ default_async_poll }}"
      get_url: url={{ item.value }} dest=~/
      with_dict: "{{ worker_resources }}"

    - name: Create config dirs
      async: "{{ default_async_timeout }}"
      poll: "{{ default_async_poll }}"
      become: true
      file:
        path: "{{ item.value }}"
        state: directory
        #recurse: yes
      with_dict: "{{ worker_config_dirs }}"

    - command: mv runc.amd64 runc
      ignore_errors: yes

    - name: chmod +x kubectl kube-proxy kubelet runc.amd64 runsc
      file: dest="{{ item }}" mode=+x
      loop:
        - kubectl
        - kube-proxy
        - kubelet
        - runc
        - runsc

    - name: Move worker binaries
      become: true
      command: mv kubectl kube-proxy kubelet runc runsc /usr/local/bin/

    - name: Extract archives
      become: true
      unarchive: src={{ item.src }} dest={{ item.dest }} remote_src=yes
      with_items:
        - { src: "/home/ubuntu/{{ crictl_version }}.tar.gz", dest: "/usr/local/bin/" }
        - { src: "/home/ubuntu/{{ cni_plugins_version }}.tgz", dest: "/opt/cni/bin/" }
        - { src: "/home/ubuntu/{{ containerd_version }}.tar.gz", dest: "/" }

    - name: Set nodes pod cidr
      set_fact:
        node_pod_cidr: "10.200.{{ host_idx }}.0/24"

    - name: Process bridge network template and send to remote
      become: true
      template:
        src: "{{ playbook_dir }}/k8s_components_configuration/bridge-network.conf"
        dest: /etc/cni/net.d/10-bridge.conf

    - name: Copy loopback net configuration to remote
      become: true
      copy:
        src: "{{ playbook_dir }}/k8s_components_configuration/loopback-network.conf"
        dest: /etc/cni/net.d/99-loopback.conf

    - name: Copy certs and config files to worker nodes
      become: true
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: "{{ playbook_dir }}/ca_tls/ca.pem", dest: "/var/lib/kubernetes/" }
        - { src: "{{ playbook_dir }}/ca_tls/kubernetes-client.pem", dest: "/var/lib/kubelet/" }
        - { src: "{{ playbook_dir }}/ca_tls/kubernetes-client-key.pem", dest: "/var/lib/kubelet/" }
        - { src: "{{ playbook_dir }}/k8s_components_kubeconfigs/worker-{{ host_idx }}.kubeconfig", dest: "/var/lib/kubelet/kubeconfig" }

    - name: Template kubelet-config
      become: true
      template:
        src: "{{ playbook_dir }}/k8s_components_configuration/kubelet-config.yaml"
        dest: /var/lib/kubelet/kubelet-config.yaml

    - name: Copy kubelet.service
      become: true
      copy:
        src: "{{ playbook_dir }}/service.definitions/kubelet.service"
        dest: /etc/systemd/system/kubelet.service