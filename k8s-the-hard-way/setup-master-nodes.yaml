- hosts: localhost
  tasks:
    - name: Check mandatory variables
      fail:
        msg: "{{ item }} was not defined!"
      when: vars[item] is undefined
      loop:
        - etcd_download_url
        - master_ips
        - masters_internal_ips
        #TODO: for now assume that masters_internal_ips will be provided manually, this is to be automated in the future.

    - name: Generate encryption config for etcd
      shell: ./generate_encryption_config.sh
      args:
        chdir: "{{ playbook_dir }}/encryption"

    - name: Generate kubeconfig for masters conponents
      command: "./generate_kubeconfig.sh --component-name={{ item }} --k8s-public-ip=127.0.0.1"
      args:
        chdir: "{{ playbook_dir }}/k8s_components_kubeconfigs/"
      loop:
        - kube-controller-manager
        - kube-scheduler
        - admin

- hosts: master-nodes
  name: Setup master nodes
  user: ubuntu
  gather_facts: no
  tasks:
    - name: Set host index
      set_fact:
        host_idx: "{{ play_hosts.index(inventory_hostname) }}"

    - name: Copy certs, kubeconfigs and encryption config to master nodes
      copy:
        src: "{{ item.src }}"
        dest: ~/
      with_items:
        - { src: './ca_tls/ca.pem' }
        - { src: './ca_tls/kubernetes-client.pem' } #?
        - { src: './ca_tls/kubernetes-client-key.pem' }
        - { src: 'k8s_components_kubeconfigs/kube-controller-manager.kubeconfig'}
        - { src: 'k8s_components_kubeconfigs/kube-scheduler.kubeconfig'}
        - { src: 'k8s_components_kubeconfigs/admin.kubeconfig'}
        - { src: 'encryption/encryption-config.yaml'}
        - { src: '{{ playbook_dir }}/etcd/create_etcd_service_definition.sh'}
#      when:

    - name: Download etcd binaries
      get_url: url={{ etcd_download_url }} dest=~/
#     when:

    # TODO: Check if this works on ubuntu 18.04 machine
    - name: Extract etcd archive
      unarchive: src=etcd-v3.3.9-linux-amd64.tar.gz dest=~ remote_src=yes

    - command: pwd
      register: base_user_home
      tags:
        - etcd

    - name: Move etcd binaries
      become: true
      command: "mv {{ base_user_home.stdout }}/etcd-v3.3.9-linux-amd64/{{ item }} /usr/local/bin/"
      loop:
        - etcd
        - etcdctl

    # This should in future just ensure that appropriate volume is mounted to the instance in specified path for --data-dir.
    - name: Create etcd directories
      become: true
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/etcd
        - /var/lib/etcd
      tags:
        - etcd

    - name: Copy secrets to etcd
      become: true
      copy:
        src: "{{ item.src }}"
        dest: /etc/etcd/
        remote_src: yes
      with_items:
        - { src: "{{ base_user_home.stdout }}/ca.pem" }
        - { src: "{{ base_user_home.stdout }}/kubernetes-client.pem" }
        - { src: "{{ base_user_home.stdout }}/kubernetes-client-key.pem" }
      tags:
        - etcd

    - name: Set host name
      command: hostname -s
      register: hostname

    - name: Make create_etcd_service_definition.sh executable
      file: dest="{{ base_user_home.stdout }}/create_etcd_service_definition.sh" mode=a+x

    - name: Get current host external ip
      set_fact:
        host_ip: "{{ hostvars[inventory_hostname].inventory_hostname }}"

    - name: Get current host internal ip
      command: hostname -I
      register: host_internal_ip_out

    - set_fact:
        host_internal_ip: "{{ host_internal_ip_out.stdout }}"

    - name: Create etcd service definition
      command: "./create_etcd_service_definition.sh --name=etcd{{host_idx}} --internal-ip={{ host_internal_ip }} --etcd-hosts-ips={{ masters_internal_ips }}"
      args:
        chdir: "{{ base_user_home.stdout }}"

    - name: move etcd service definitions
      become: true
      copy:
        src: "{{ item.src }}"
        dest: /etc/systemd/system/
        remote_src: yes
      with_items:
        - { src: "{{ base_user_home.stdout }}/etcd.service" }

    - name: Reload systemd to reread configs
      become: true
      systemd:
        daemon_reload: yes
      tags:
        - systemd_test

    - name: Enable etcd service
      become: true
      systemd:
        name: etcd
        enabled: yes

    - name: Start etcd service
      become: true
      systemd:
        name: etcd
        state: started

    - name: Validate etcd cluster health
      become: true
      command: etcdctl --ca-file=/etc/etcd/ca.pem cluster-health
      register: result
      until: result.stdout.find("cluster is healthy") != -1
      retries: 6
      delay: 10